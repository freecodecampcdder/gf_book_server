// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// BookDao is the data access object for table book.
type BookDao struct {
	table   string      // table is the underlying table name of the DAO.
	group   string      // group is the database configuration group name of current DAO.
	columns BookColumns // columns contains all the column names of Table for convenient usage.
}

// BookColumns defines and stores column names for table book.
type BookColumns struct {
	Id           string //
	LanguageId   string // 语种ID
	Title        string // 书名
	Author       string // 作者名称
	Cover        string // 图书缩略图
	Translator   string // 译者
	Description  string // 简介
	Status       string // 1可借 3下架
	Isbn         string // 国际标准图书编号
	Press        string // 出版社
	PressTime    string // 出版时间
	PageNum      string // 页数
	WishNum      string // 心愿数量
	CollectNum   string // 收藏数量
	BorrowNum    string // 被借数量
	Price        string // 租售价格*100
	BuyPrice     string // 售卖价格*100
	InventoryNum string // 库存数量
	UserId       string // 添加人ID
	Recommended  string // 推荐系数 越大越靠前
	CreatedAt    string //
	UpdatedAt    string //
	DeletedAt    string //
}

// bookColumns holds the columns for table book.
var bookColumns = BookColumns{
	Id:           "id",
	LanguageId:   "language_id",
	Title:        "title",
	Author:       "author",
	Cover:        "cover",
	Translator:   "translator",
	Description:  "description",
	Status:       "status",
	Isbn:         "isbn",
	Press:        "press",
	PressTime:    "press_time",
	PageNum:      "page_num",
	WishNum:      "wish_num",
	CollectNum:   "collect_num",
	BorrowNum:    "borrow_num",
	Price:        "price",
	BuyPrice:     "buy_price",
	InventoryNum: "inventory_num",
	UserId:       "user_id",
	Recommended:  "recommended",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
	DeletedAt:    "deleted_at",
}

// NewBookDao creates and returns a new DAO object for table data access.
func NewBookDao() *BookDao {
	return &BookDao{
		group:   "default",
		table:   "book",
		columns: bookColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *BookDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *BookDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *BookDao) Columns() BookColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *BookDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *BookDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *BookDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
